window.fakeStorage = {
  _data: {},

  setItem: function (id, val) {
    return this._data[id] = String(val);
  },

  getItem: function (id) {
    return this._data.hasOwnProperty(id) ? this._data[id] : undefined;
  },

  removeItem: function (id) {
    return delete this._data[id];
  },

  clear: function () {
    return this._data = {};
  }
};

function LocalStorageManager() 
{
	this.bestScoreKey = "bestScore";
	this.bestMovesKey = "bestMoves";
	this.gameStateKey     = "gameState";
	this.highestRandomKey = "highestRandom";
	this.totalRandomGoldKey = "totalRandomGold";
	this.presolvedRandomsLongStringKey = "preSolvedRandomLongString";
	this.randomGenerationVersionKey = "preSolvedRandomVersion";

	var supported = this.localStorageSupported();
	this.storage = supported ? window.localStorage : window.fakeStorage;

	// version clearing
	var currentversion = "1.0";
	var version = this.storage.getItem("Version") || 0;
	if (version != currentversion)
		this.storage.clear();
	this.storage.setItem("Version", currentversion);

	// random generation version clearing
	this.randomGenerationVersion = "8";
	this.defaultCachedPuzzleSolutionString = "0,0X704X050470X7X6,.1,006X06X5X70765X0,ULDLURURD.0,0433704537700350,DLURULULDRDLD.2,XX006056770065X0,.2,XXX00766070X5506,LDLULDD.3,00X5X68X5X560005,DRULDLLD.4,0X6080XX560460X4,.4,0X8X50X6060550X5,.5,X660X0X570X067X5,ULDRDUL.6,75X0X0060X067605,.4,5X33666040675500,LURDLDLULDD.7,6X0606X060606X7X,.6,0607364005036556,.7,60066X70605X56XX,.8,0455068XX4X0506X,LDRULDLDL.9,00X7060650547540,.9,0X07406X50X07740,.9,3500740650066563,.6,X5X0X07X0X665067,.10,634X0855X050360X,.9,X40073X560056573,.11,0X460564074047X5,LDRULULRD.6,X7X500X0X0676056,.9,00X07X06X0657650,.10,600X0756X6X05XX7,.9,0440040570406765,.7,6006607X60606XXX,RURDRDD.9,0XX08XX460X46560,LDLDRDRURD.6,X70505XX0X067066,.10,844X0X55004047XX,.6,08X50440X0006X66,.6,X0X540400606776X,.6,X0X550700600766X,.6,3504460663574060,.12,0005350744063746,LDLURURDLURULDRDUL.6,X0X707470X05046X,ULURDLDLRURD.13,674456000555X605,LDLURDLULD.14,3504460663754600,.14,X0X747070X05046X,.14,05026402308565X0,.15,4657453004503057,.14,2603058235306500,.14,06X0550000667X7X,.15,75060700XXXX0656,.16,3743005355407536,.16,60X6X0006066076X,.10,4555750454650455,RURDLLDDL.15,060570XXX6XX0657,.16,5X07XX0007046X74,.16,400XX00680045X66,.14,5534643407543366,DRULLDDLL.16,7131450164665146,.17,4654734705333450,ULDRDLURDLDL.16,0640XX0050X477X7,.18,5008324555444254,RDDLDRDDLL.15,5364535545054666,RDLULDLDD.19,5225354225303386,.20,770560X005XX0X66,.19,0005805055XX5555,.21,X06XX06055X07067,.21,X064XX064X500806,.22,5550X700050X770X,ULDLUL.23,550XX07X0X850440,.24,55X5500077X0X0X7,RULLUL.20,6056X00X77XX0X65,RDRURDRDD.16,5640440064575644,DRULULRDD.25,7575XX7XX00005X5,.26,6506705X0060X7X0,.27,680550500X60XXX5,.27,6044007X707XXX05,.25,4505000067765X04,.21,X0804X460560X006,.23,5503345404545747,.25,566X70XXX0075006,DLDLURDLDRDLLDL.26,7505XX5X070X57X0,.21,XXX40X77045X0706,RULURULDLLD.28,6X50056XX505XX08,LULULDD.27,70570074X4XX0X06,.29,60665X04004XX800,.27,56X6567X066X00X0,RDLDLD.30,7X5X0X0X60570606,.30,5056504567045550,.30,07060X066X6006X6,.30,00750X0066X7065X,.31,X6X70050X6050X67,.32,506X006XX0075607,.32,606X0X000X705657,.32,60600XX00X506757,.32,760X60030X405736,.30,00760XX076X0565X,DLLURURURDD.32,7080X003X03046X5,.32,80X0XX060X4X4665,RDLDDLRD.33,066XX076X5600X56,LDRDDRURD.34,6556005066X5X070,.34,76556X006000XX7X,RULLL.35,666506X00605606X,.36,40086651013X0602,ULDRDLDRDLDLDLL.35,5667354054454453,DURDRURDRDDL.37,0X07035500238253,DLDLDRDLLRD.38,034X804735034403,.38,X505X608550X06X0,.39,7450005553605366,.29,4620657445534462,URULDRULLLDULUL.38,0358305430565034,.39,70077XX0X4004605,.39,73307X04007X5055,.39,600X7XX00X650657,LDRDRULD.31,0070754075X3530X,LURDLURULLD.38,2343203403483447,.40,3304467357350600,DLDLULDLRULD.41,0334440307354766,.41,3543743553373406,.42,2442022037127617,.42,1753043047123507,.41,X607075005XX606X,.41,X076750X6X404600,.41,00565605X5066700,.41,0037560507045036,.41,XX557005X705X700,DLLUL.43,6540556443665603,.43,70066704X4406303,.43,5660650555065505,.43,5554645445540754,DLLULDLD.42,4175054543644721,LDLDLDRDRDURDDL.38,0454358500450355,URDRDLULDLDDLLD.44,4753532073442546,LDRULDLDDLDUL.45,X605X55X50806X0X,RDULULLD.46,64000540806XXX60,RDRDRURURDRDD.47,XX0076055766X00X,DDRULDRDL.48,X0675X6X7X06500X,LDRULURUL.49,070X06X60X666600,DRURD.50,06X047X507X0X407,.50,000657X6047064X0,RDRULDLDL.51,000XX50X70X66765,.52,40X0X547707060X0,.51,0050X6X0X70X6576,RURDULULL.52,40X0056707070XX4,.53,5605X060776X00XX,.52,2702052527365262,.54,XX40X78055405X00,ULDRDLULLD.53,5605X0X586005XXX,.55,X07485X4X55XX000,RDULL.52,3062363053472753,.52,60X00X087440XX44,.56,0700X7045XX70406,.52,70XX4008054XX055,.57,X0X400464X47X008,DLDLDLLL.56,05XX57X56X067050,.56,050XX6X76X057060,.58,605X00X77X565005,.56,0775047023402444,DULURDRUL.53,4760550444550007,ULULDRULDRDLURDL.58,506X00067X56X007,.59,30X000485475043X,.60,7055X30703450007,RURDRDL.58,0660646X00660564,LULDRDLRD.59,XXXX08507550044X,URULDLD.61,400X420027638033,DLULURDRDLDLULL.52,7550555335446064,DRDLULURULLD.62,4065447004700056,.63,5406644645706000,ULUDRULLD.62,4770057XX05X0045,.64,0304666704504365,.64,XXX656760705X000,ULURDLDD.65,0660555605505556,.65,477X00704X0600X5,.66,0062320248526543,.65,67X007X5X00606X5,ULURDRDRDL.67,4435544760543066,RDRDLDLULDLD.66,2207243205656734,DLURULURDLULDRDLRD.68,5547506034553654,ULLDRDRURDL.69,1726445665450513,.69,X05X70706X0X56X6,.70,5667070X0X0065XX,.69,X406800X60XX54X6,.71,705X6X5X00606X07,.72,0X5660X00X057076,.70,660706XX060X660X,.69,X55804440400X606,.69,X657050000X7X6X6,.72,8452343452600534,.73,0XX6303X07X48500,.69,X65804040X00X6X6,.71,06X7650XX6050X07,RULURURULDLDLD.72,8433543360500445,.74,X4600X74408004XX,.72,600840X6XX006045,.69,3435755660450455,.74,05604480460405XX,.75,XX5600X77X704X04,.76,7X075700X050505X,.77,05670XX0X006675X,.75,4067000X407X70X5,.69,X6X55506050X0X80,ULDUL.75,507X000X55007X57,.70,67006XX5050X670X,URDLDLULD.74,X4080X754005X50X,.77,05500X5XX007577X,.75,6554066054046645,.73,3450360084350603,LDLULDLURULULULLD.75,6544077034046430,.77,4455030707554360,DRULDRDLULDD.74,7X47650536500300,LURULDRULULUL.76,8XX7050X05044X5X,ULDRDRDLD.78,X860XX4XX0704044,ULDRULUL.72,5543542373566062,ULULDLULDDLD.75,6554007704345530,LURURDDLDL.79,55007050X0X0X757,LURDRDLDLURDRD.80,0566X0X06X0X7750,.80,550060560506X760,.81,6X66X60060700XX6,.80,X75X0X6056X0X670,ULRULDLD.82,6600X40X8040X605,.81,7065X44X700000X7,.82,660XX05X0X5X0855,.83,60X055X50585X005,ULURDL.81,2604545576455352,.82,6640505056054656,.81,06XX66X76000606X,.81,06X076X0660X606X,.81,07XX70656500X60X,.81,XX0X776055606X0X,DLUL.84,600065X80405X405,LLURDRDLD.82,770X04XX0050X746,.82,70X065XX0X500676,DLURULUL.85,760X505XX0505666,LRDRDLDLURURD.86,60054570040566X6,.86,7005407006X455X6,.87,6X50X35076040357,.87,600XX506X0X05767,.88,7606070434530054,RULDRDLDRDRDRDL.87,2601014606750272,.89,5555460500076455,.86,5534534660464664,URDLDLULDD.87,703XXX40630X0058,.89,66050XX70XX605X7,LULDRURDRDD.90,5055750545406560,.87,803XXXX507430060,ULURDRDLDLD.90,4644546554545660,RURDDLDDDL.91,4606556545005565,DULDRURUL.92,0442247242444077,DLURDLDDLLDL.93,5625024363427702,.93,55XX005XX7770500,DLDLDLDL.94,5547505354655345,RDLLULURDLDLD.95,7533505644555455,LLURDRULDL.96,05770X00060X65X6,DRURDURD.97,5X6050X800X55X60,LDRDLDRURURD.98,056XX860XXX55050,LDLULDLDD.99,XX67505X70006006,.100,76X6X606X60060X0,LDLDD.99,XX55X058X0006506,.99,XX656X6X00007507,.99,X0467XX740000507,.99,X0X775X74X000064,.99,X0X6400846X00056,.99,0052042558036445,.99,XX07X00750050575,.99,XXX07007X6X55066,DLURULLUL";

	var randoVersion = this.storage.getItem(this.randomGenerationVersionKey) || 0;
	this.storage.setItem(this.randomGenerationVersionKey, this.randomGenerationVersion);
	if (randoVersion != this.randomGenerationVersion)
	{
		console.log("Random version changed!");
		this.setHighestRandomCompleted(0);
		this.setPresolvedRandomsLongString(this.defaultCachedPuzzleSolutionString);
	}
}

LocalStorageManager.prototype.localStorageSupported = function () 
{
	var testKey = "test";
	var storage = window.localStorage;
  
	try 
	{
		storage.setItem(testKey, "1");
		storage.removeItem(testKey);
		return true;
	} 
	catch (error) 
	{
		return false;
	}
};

// Best score getters/setters
LocalStorageManager.prototype.getBestScore = function (identifier) 
{
	return this.storage.getItem(this.bestScoreKey + (identifier ? identifier : "X")) || 0;
};

LocalStorageManager.prototype.setBestScore = function (identifier, score)
{
	this.storage.setItem(this.bestScoreKey + (identifier ? identifier : "X"), score);
};

LocalStorageManager.prototype.getBestMovesToComplete = function (identifier)
{
	return this.storage.getItem(this.bestMovesKey + (identifier ? identifier : "X")) || 0;
};

LocalStorageManager.prototype.setBestMovesToComplete = function (identifier, moves)
{
	this.storage.setItem(this.bestMovesKey + (identifier ? identifier : "X"), moves);
};

LocalStorageManager.prototype.getHighestRandomCompleted = function ()
{
	return this.storage.getItem(this.highestRandomKey) || 0;
};

LocalStorageManager.prototype.setHighestRandomCompleted = function (seed)
{
	var oldHighest = this.getHighestRandomCompleted();
	if(seed > oldHighest)
		this.setTotalRandomGold(parseInt(this.getTotalRandomGold())+1);
	this.storage.setItem(this.highestRandomKey, seed);
};

LocalStorageManager.prototype.getTotalRandomGold = function ()
{
	return this.storage.getItem(this.totalRandomGoldKey) || 0;
};

LocalStorageManager.prototype.setTotalRandomGold = function (num)
{
	this.storage.setItem(this.totalRandomGoldKey, num);
};

LocalStorageManager.prototype.getPresolvedRandomsLongString = function ()
{
	return this.storage.getItem(this.presolvedRandomsLongStringKey) || this.defaultCachedPuzzleSolutionString;
};

LocalStorageManager.prototype.setPresolvedRandomsLongString = function (longString)
{
	this.storage.setItem(this.presolvedRandomsLongStringKey, longString);
};
